"""Набросок структуры программы и API для автоматического повторения ручных корректировок данных, преимущественно строковых.
    Полезно для тех алгоритмов, которые регулярно обрабатывают одни и те же / сильно похожие данные.
    

    Комментарии к визуальной части:
    Список (таблица) Корректировок — основная web-страница для человека (администратора, ревьювера).
    
    
     — Состав строки про одну Корректировку:
     
        - текст заменяемого объекта (`subject`).
        
        - (значок "преобразования" из HTML-entities): 
            • знак равенства, если корректировка совпадает с самим заменяемым объектом,
            • прямая стрелка вправо, если корректировка взята из фиксированной гипотезы,
            • карандаш (или рука с карандашом), если корректировка взята из вручную редактируемой гипотезы,
            • перечеркнутая стрелка вправо для аннулированной гипотезы.

        - текст заменяющего объекта (из лучшей или заданной гипотезы) — пустой для аннулированной гипотезы.
        
        - кнопки в виде иконок для выполнения действий:
            • подтверждение (галочка ОК) — если статус "ожидает",
            • редактирование (шестерёнка),
            • аннулирование (перечёркнутый круг СТОП / перечёркнутый глаз / др. со значением скрыть/заблокировать),
            • удаление (крестик или корзина).

        - дата создания и последней модификации.
        
     — Статус корректировки влияет на цвет строки в таблице: ожидает: красный, подтверждена: чёрный (или неяркий зелёный), аннулирована: серый.
        (цвет может быть применён к фону или к шрифту)

     — Сортировка через заголовок таблицы по:
        - алфавиту по `subject`,
        - дате создания,
        - дате изменения.

     — Фильтрация по статусу (ожидает, подтверждена, аннулирована, — множественный выбор): чтобы можно было вывести в начало строки с любым статусом, а остальные скрыть.
     
     
    Форма редактирования Корректировки.

    Может быть выполнена в виде модального окна или отдельной страницы.
    Необходимые изменения в структуре содержимого (добавление и удаление гипотез)  должны выполняться по нажатию кнопок здесь же, без обращения к серверу.
    Для сохранения изменений внизу должна быть предусмотрена кнопка, как в обычной форме. Сохранение каждого нажатия в асинхронном режиме не требуется.
        
    Важный визуальный элемент — моноширинный текст и подсветка невидимых символов ( пробелов) для смыслового (изменяемого, заменяющего и редактируемого) текста, как например, это сделано здесь: https://den1s0v.github.io/regex-helper/src/.

    
"""

from typing import Optional


class Item:
    """Корректируемый объект/сущность (или гипотеза — вариант замены корректируемого объекта).
        Корректируемый объект выражается строкой `value`.
        Может иметь контекст, содержимое которого может повлиять на выбор человека в пользу той или иной гипотезы.
        Объекты `Item` с одинаковыми `value`, но с разными контекстами считаются разными, если есть отличия в составе либо значениях важных элементов контекста, и одинаковыми, если важные элементы контекста полностью совпадают (отличия в неважных элементах игнорируются).
    """
    value: str  # Коректируемое значение.

    context: list['ContextElement']  # Набор значений "контекста" — дополнительная информация произвольного вида, по которой человек может догадаться о принадлежности объекта и сделать выбор в пользу той или иной гипотезы.  Может быть пустым.
    
    score: Optional[float] = 0  # Степень совпадения гипотезы с корректируемым объектом. Диапазон: [0..1], значение больше — совпадение лучше. Имеет смысл для `Item` в качестве гипотезы; для самого корректируемого объекта `score`  принимается равным 0 (как наименее правдоподобная гипотеза: если для объекта была запрошена коррекция, то «не корректировать вовсе» будет последним вариантом).
    
    # is_default: bool — избыточен при наличии score.
    
    approved: bool = False  # флаг: "одобрено", "выбрано в качестве желательного варианта для корректировки"

    suggested_by_reviewer: bool = False  # флаг, позволяющий указать, что вариант замены был создан вручную проверяющим человеком (когда ни одна из гипотез, по его мнению, не подошла, и он внёс руками свой вариант) и может быть отредактирован вручную.


class ContextElement:
    """Элемент контекста: Информация произвольного вида, предназначенная для просмотра человеком. 
        По своей структуре «ключ-значение» больше всего напоминает элемент словаря.
        Дополнительный флаг `important` служит для пометки элемента контекста как важного (True) и либо несущественного (False) при определении наиболее подходящей гипотезы.
    """
    key: str  # ключ элемента контекста
    value: str  # значение элемента контекста
    important: bool = False  # признак значимости для принятия решения о выбранной гипотезе (задаётся человеком через UI).


class Correction:
    """Корректировка: изменяемый способ откорректировать некоторый объект.
        Знает о том, как следует изменять объект, совпадающий с `subject`.
        Отображается в UI и может быть в любой момент отредактирована человеком, а также аннулирована в случае устаревания.
        Процесс корректировки объекта состоит в том, чтобы получить вместо него одну из гипотез с другим значением `value`. 
        Гипотезы `hypotheses` по происхождению делятся на фиксированные (пришедшие из запроса на корректировку) и дополнительные, созданные и редактируемые вручную через UI (у последних признак `suggested_by_reviewer` = True).

        Создаётся со статусом PENDING и ожидает проверки и утверждения человеком.
        В статусе PENDING:
         — высвечивается человеку как непроверенная.
         — отдаёт в качестве оптимальной корректировки гипотезу с максимальным `score` (в случае отсутствия гипотез возвращается сам `subject`).
         — Может быть утверждена (см. далее).

        При утверждении/редактировании человеком:
         — элементы контекста в subject могут поменять свой статус (важный/ несущественный), причём при первом сохранении внимание пользователя необходимо концентрировать на осознанном изучении и разметке этих элементов контекста (если ни один элемент важным не является, то пусть выберет доп. пункт «ни один пункт не важен»; но нельзя разрешать совсем пустой выбор).
         — статус изменяется на APPROVED (или на INVALID, если нужно вывести  корректировку из эксплуатации без полного удаления).
         — одна из гипотез может получить `approved` = True (не более одной, т.е. single-selection в стиле radio-buttons), в случае же сохранения без утверждения какой-либо гипотезы, утверждённой автоматически становится оптимальная, как в статусе PENDING (см. выше).
         — могут быть удалены фиксированные гипотезы (человек посчитал их полностью неадекватными), хотя это и не должно считаться нормальной практикой.
         — могут быть добавлены, изменены или удалены дополнительные гипотезы,  вводимые человеком вручную через текстовое поле ввода (их `score`по умолчанию задаётся равным 1, как наиболее желательных). Эти гипотезы участвуют в процессе наравне c фиксированными и могут быть выбраны как основные (`approved` = True). Обычно имеет смысл создавать не более одной дополнительной гипотезы.
         —  сохраняется время создания (обновления) корректировки.
         
        В статусе APPROVED:
         — высвечивается человеку как проверенная.
         — отдаёт в качестве оптимальной корректировки выбранную человеком гипотезу (`approved` = True).
         — может быть отредактирована, а также переведена в статус INVALID.

        В статусе INVALID:
         — высвечивается человеку как аннулированная.
         — НЕ отдаёт оптимальную корректировку, но вместо этого ПРИ ЗАПРОСЕ "пересоздаётся" заново со статусом PENDING, обнулив при этом `score` созданных вручную дополнительных гипотез и заменив фиксированные гипотезы на гипотезы
            из нового запроса на корректировку, а также отменив ручной выбор любых гипотез как предпочтительных (таким образом, полностью повторяя поведение созданной с нуля корректировки, но сохраняя ручной ввод безопасным образом).
         — может быть полностью удалена из системы.
         — может быть отредактирована и переведена в статус APPROVED.

    """
    subject: Item  # Корректируемый объект.
    
    hypotheses: list[Item]  # набор гипотез о корректировке. Значение value выбранной гипотезы призвано заменить с собой конвертируемый объект.
    
    status: int = 0  # Статус корректировки: 0 — PENDING: создана и требует проверки, 1 — APPROVED: проверена и утверждена, 2 — INVALID: аннулирована и отключена до следующего востребования.

    # метаданные:
    created_at: 'datetime'
    updated_at: 'datetime'
    scope_id: int = 0  # указание на предметную область, в рамках которой имеет смысл искать имеющиеся корректировки. Предметные области не пересекаются между собой.
    


# Ключевая функция API корректировок.
def apply_correction(
                     subject: Item, 
                     hypotheses: list[Item], 
                     scope_id: int = 0,
                    ) -> Item:
    """ Возвращает оптимальную корректировку для заданного объекта, учитывая созданные вручную переопределения.
    
      Алгоритм:
        Найти в БД в заданном scope корректировки, `subject` которых совпадает c `subject` (параметром этой функции), 
        учитывая совпадение "важных" элементов контекста (см. описание `Item`).

        В случае обнаружения в БД подходящей корректировки в подтверждённом статусе: 
            — проверить, нет ли в запросе гипотез с более высоким рейтингом `score`, чем текущая подтверждённая гипотеза из найденной корректировки:
                 — Если есть: добавить новые гипотезы в корректировку, сохранить её в БД и выставить статус PENDING.
            — вернуть (текущую) оптимальную (подтверждённую) гипотезу из найденной корректировки.

        В случае обнаружения в БД подходящей корректировки в ожидающем статусе: 
            — добавить новые (если есть) гипотезы в корректировку, сохранить её в БД.

        В случае обнаружения в БД подходящей корректировки в аннулированном статусе: 
            — заменить "фиксированные" гипотезы в корректировке, сохранив вручную созданные (но отключив их и убрав `score` в 0), сохранить её в БД и выставить статус PENDING.

        — вернуть оптимальную (по `score`) гипотезу из запроса.

    Args:
        subject (Item): корректируемый объект
        hypotheses (list[Item]): перечень гипотез для коррекции (может быть пустым).
        scope_id (int, optional): идентификатор области действия (нужен чтобы разграничивать рабочие области для разных клиентов нашего API). Defaults to 0 — global scope.

    Returns:
        Item: скорректированный объект.
    """
    pass
